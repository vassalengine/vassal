package VASSAL.tools.version;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Properties;

/**
 * Reads {@link java.util.Properties} generated by Git-Commit-Id-Plugin
 */
public class GitProperties {

  private static final Logger log = LoggerFactory.getLogger(GitProperties.class);

  private static final String DEFAULT_FILENAME = "git.properties";

  private static final String KEY_GIT_CLOSEST_TAG_NAME = "git.closest.tag.name";
  private static final String KEY_GIT_CLOSEST_TAG_COMMIT_COUNT = "git.closest.tag.commit.count";
  private static final String KEY_GIT_COMMIT_ID = "git.commit.id";

  private static final String DEFAULT_CLOSEST_TAG_NAME = "3.3.0";
  private static final String DEFAULT_CLOSEST_TAG_COMMIT_COUNT = "0";
  private static final String DEFAULT_COMMIT_ID = "_developmentversion";

  private static final int GIT_COMMIT_ID_ABBREVIATED_LENGTH = 12;

  private final String filename;
  private final Properties gitProperties;

  public GitProperties() {
    this(DEFAULT_FILENAME);
  }

  public GitProperties(final String filename) {
    this.filename = filename;
    gitProperties = new Properties();
    readGitProperties();
  }

  private void readGitProperties() {
    ClassLoader classLoader = getClass().getClassLoader();
    try (InputStream is = classLoader.getResourceAsStream(filename)) {
      if (is == null) {
        return;
      }

      try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {
        gitProperties.load(reader);
      }

    }
    catch (IOException e) {
      log.error("Error while trying to read properties from {}", filename, e);
    }
  }

  public String getVersion() {
    return String.format(
      "%s-%s-g%s",
      gitProperties.getProperty(KEY_GIT_CLOSEST_TAG_NAME, DEFAULT_CLOSEST_TAG_NAME),
      gitProperties.getProperty(KEY_GIT_CLOSEST_TAG_COMMIT_COUNT, DEFAULT_CLOSEST_TAG_COMMIT_COUNT),
      gitProperties.getProperty(KEY_GIT_COMMIT_ID, DEFAULT_COMMIT_ID).substring(0, GIT_COMMIT_ID_ABBREVIATED_LENGTH)
    );
  }

}
