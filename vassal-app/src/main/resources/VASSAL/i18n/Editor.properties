# Module Editor Properties
# Contains all translatable strings for the Module Editor
# Strings for the playable user interface are in Editor.properties

# Documentation
Editor.Documentation.component_type=Help Menu

# GameModule
Editor.GameModule.component_type=Module
Editor.GameModule.name_label=Game Name:  
Editor.GameModule.version_label=Version Number:  
Editor.GameModule.description=Description:  

# General Strings
Editor.button_icon_label=Button Icon:  
Editor.button_text_label=Button text:   
Editor.tooltip_text_label=Tooltip Text:  
Editor.hotkey_label=Hotkey:  
Editor.color_label=Color:  
Editor.name_label=Name:  
Editor.description_label=Description:
Editor.report_format=Report Format:  
Editor.menu_command=Menu Command:
Editor.keyboard_command=Keyboard Command:
Editor.cut=Cut
Editor.paste=Paste
Editor.copy=Copy
Editor.delete=Delete
Editor.undo=Undo
Editor.move=Move
Editor.save=Save
Editor.save_as=Save As...
Editor.edit_extension=Edit Extension
Editor.new_extension=New Extension

# Module Editor
Editor.ModuleEditor.component_type=Module
Editor.ModuleEditor.reference_manual=Reference Manual
Editor.ModuleEditor.updaters=Updaters
Editor.ModuleEditor.create_updater=Create updater
Editor.ModuleEditor.update_saved=Update saved games
Editor.ModuleEditor.properties=Properties
Editor.ModuleEditor.translate=Translate
Editor.ModuleEditor.edit=Edit %1$s
Editor.ModuleEditor.component_help=Component help

# Extension Editor
Editor.ExtensionEditor.component_type=Extension

# Player Roster 
Editor.PlayerRoster.component_type=Definition of Player Sides
Editor.PlayerRoster.sides_available=Sides available to players
Editor.PlayerRoster.retire_button_text='Retire' button text:  
Editor.PlayerRoster.retire_button_tooltip='Retire' button tooltip:  
Editor.PlayerRoster.retire_button_icon='Retire' button icon:  
Editor.PlayerRoster.sides_label=Sides:  

# ToolbarMenu
Editor.ToolbarMenu.component_type=Toolbar Menu
Editor.ToolbarMenu.menu_entries=Menu Entries

# BoardPicker
Editor.BoardPicker.dialog_title=Dialog Title
Editor.BoardPicker.board_prompt="Select boards" prompt
Editor.BoardPicker.component_type=Map Boards
Editor.BoardPicker.cell_scale_factor=Cell scale factor
Editor.BoardPicker.cell_width=Cell width
Editor.BoardPicker.cell_height=Cell height

# PlayerHand
Editor.PlayerHand.component_type=Player Hand

# PredefinedSetup
Editor.PredefinedSetup.parent_menu=Parent Menu?
Editor.PredefinedSetup.predefined_file=Use pre-defined file?
Editor.PredefinedSetup.saved_game=Saved Game:
Editor.PredefinedSetup.component_type=Pre-defined setup

# Chart Window
Editor.ChartWindow.component_type=Chart Window Menu

# Dice Button
Editor.DiceButton.component_type=Dice Button
Editor.DiceButton.report_total=Report Total?
Editor.DiceButton.prompt_value=Prompt for values when button pushed?
Editor.DiceButton.sort_results=Sort dice results:

# Die Manager
Editor.DieManager.description=Description
Editor.DieManager.ndice=Multi-roll Default Ndice
Editor.DieManager.nsides=Multi-roll Default Nsides
Editor.DieManager.component_type=Die Manager

# Do Action
Editor.DoAction.display_message=Display Message?
Editor.DoAction.play_sound=Play a sound?
Editor.DoAction.sound_clip=Sound Clip:
Editor.DoAction.send_hotkeys=Send Hotkeys?
Editor.DoAction.hotkeys=Hot Keys:
Editor.DoAction.component_type= Action Button
Editor.DoAction.repeat_actions=Repeat this set of actions (loop)?
Editor.DoAction.perform_before=Perform this Hotkey once before looping starts:
Editor.DoAction.perform_after=Perform this Hotkey once after looping ends:

# Global Options
Editor.GlobalOption.component_type=Global Options
Editor.GlobalOption.nonowner_unmask=Allow non-owners to unmask pieces:
Editor.GlobalOption.center_moves=Center on opponent's moves:
Editor.GlobalOption.autoreport_moves=Auto-report moves:
Editor.GlobalOption.playerid_format=Player Id format:

# Icon Family
Editor.IconFamily.component_type=Icon Family
Editor.IconFamily.family_name_label=Icon Family Name:
Editor.IconFamily.name_taken=Icon Family NOT Saved - Name already taken
Editor.IconFamily.scalable_icon_label=Scalable Icon:
Editor.IconFamily.icon_label=%1$s Icon (%2$sx%2$s):
Editor.IconFamily.size_warning=WARNING - Icon is not %1$s pixels high (%2$s).
Editor.IconFamily.illegal_icon_name=Illegal Icon Name
Editor.IconFamily.bad_icon_name=Icon name must start with family name: %1$s
Editor.IconFamily.bad_icon_file=Icon file must be a standard Image file recognized by Vassal
Editor.IconFamily.icon_load_error=Icon Load Error
Editor.IconFamily.cannot_load_icon=Cannot load Icon

# Internet Dice Button
Editor.InternetDiceButton.component_type=Internet Dice Button

# Inventory
Editor.Inventory.component_type=Game Piece Inventory Window
Editor.Inventory.show_pieces=Show only pieces matching these properties:
Editor.Inventory.sort_group_properties=Sort and Group By Properties
Editor.Inventory.label_folders=Label for folders:
Editor.Inventory.show_folders=Show only folders?
Editor.Inventory.label_pieces=Label for pieces:
Editor.Inventory.sort=Sort?
Editor.Inventory.label_sort=Label for sort:
Editor.Inventory.sort_method=Sorting method:
Editor.Inventory.center_piece=Center on selected piece?
Editor.Inventory.forward_keystroke=Forward key strokes to selected piece?
Editor.Inventory.rightclick_piece=Show right-click menu of piece?
Editor.Inventory.draw_piece=Draw piece images?
Editor.Inventory.zoom=Zoom factor:
Editor.Inventory.available=Available to these sides

# Loop Control
Editor.LoopControl.type_of_loop=Type of Loop:  
Editor.LoopControl.repeat_fixed=Repeat fixed number of times
Editor.LoopControl.repeat_until=Repeat until condition is true
Editor.LoopControl.repeat_while=Repeat while condition is true
Editor.LoopControl.loop_how_many=Loop how many times:  
Editor.LoopControl.looping_continues=Looping continues while Properties match:  
Editor.LoopControl.looping_ends=Looping ends when Properties match: 
Editor.LoopControl.loop_count=Loop Count
Editor.LoopControl.loop_index=Create a Loop Index Property?
Editor.LoopControl.index_name=Index Property Name:  
Editor.LoopControl.index_start=Index Property start value:  
Editor.LoopControl.index_step=Index Property increment value: 

# Map 
Editor.Map.component_type=Map Window
Editor.Map.map=Map
Editor.Map.map_name=Map Name:
Editor.Map.mark_pieces_moved=Mark pieces that move (if they possess the proper trait):
Editor.Map.mark_unmoved_button_text="Mark unmoved" button text:
Editor.Map.mark_unmoved_tooltip_text="Mark unmoved" tooltip text:
Editor.Map.mark_unmoved_button_icon="Mark unmoved" button icon:
Editor.Map.horizontal=Horizontal Padding:
Editor.Map.vertical=Vertical Padding:
Editor.Map.bkgdcolor=Background color:
Editor.Map.multiboard=Can contain multiple boards?
Editor.Map.bc_selected_counter=Border color for selected counters:
Editor.Map.bt_selected_counter=Border thickness for selected counters:
Editor.Map.show_hide=Include toolbar button to show/hide? (Only takes affect when module loaded)
Editor.Map.report_move_within=Auto-report format for movement within this map:
Editor.Map.report_move_to=Auto-report format for movement to this map:
Editor.Map.report_created=Auto-report format for units created in this map:
Editor.Map.report_modified=Auto-report format for units modified on this map:
Editor.Map.key_applied_all=Key Command to apply to all units ending movement on this map:

# Multi Action Button
Editor.MultiActionButton.buttons=Button Names
Editor.MultiActionButton.component_type=Multi-Action Button

# Notes Window
Editor.NotesWindow.component_type=Notes Window

# Piece Window
Editor.PieceWindow.hidden=Hidden? (requires restart)
Editor.PieceWindow.show_hide=Hotkey to show/hide:
Editor.PieceWindow.component_type=Game Piece Palette
Editor.PieceWindow.pieces=Pieces
Editor.PieceWindow.show_hide_pieces_window=Show/Hide the %1$s window

# Private Map 
Editor.PrivateMap.component_type=Private Window
Editor.PrivateMap.warning=Must add %1$s in order to use %2$s

# Prototype
Editor.Prototype.component_type=Definition

# Prototypes Container
Editor.PrototypesContainer.component_type=Game Piece Prototype Definitions

# Random Text
Editor.RandomTextButton.component_type=Random Text Button
Editor.RandomTextButton.faces=Faces
Editor.RandomTextButton.faces_numeric=Faces have numeric values?

# Special Dice
Editor.SpecialDiceButton.component_type=Symbolic Dice Button
Editor.SpecialDiceButton.symbols=Symbols
Editor.SpecialDiceButton.report_results_text=Report results as text?
Editor.SpecialDiceButton.result_window=Show result in window?
Editor.SpecialDiceButton.window_title=Window title format:
Editor.SpecialDiceButton.result_button=Show result in button?
Editor.SpecialDiceButton.width=Width:
Editor.SpecialDiceButton.height=Height:
Editor.SpecialDiceButton.background=Background color:

# Special Die
Editor.SpecialDie.component_type=Symbolic Die
Editor.SpecialDie.result_format=Results format:

# Special Die Face
Editor.SpecialDieFace.component_type=Symbolic Die Face
Editor.SpecialDieFace.text_value=Text Value:
Editor.SpecialDieFace.numeric_value=Numerical value:
Editor.SpecialDieFace.icon=Icon:

# Mouse Over Stack Viewer
Editor.MouseOverStackViewer.version=Version
Editor.MouseOverStackViewer.recommend_delay=Recommended Delay before display (ms):
Editor.MouseOverStackViewer.keyboard_shortcut=Keyboard shortcut to display:
Editor.MouseOverStackViewer.bg_color=Background color:
Editor.MouseOverStackViewer.text_color=Border/text color:
Editor.MouseOverStackViewer.display_pieces=Display when at least this many pieces will be included:
Editor.MouseOverStackViewer.display_zoom=Always display when zoom level less than:
Editor.MouseOverStackViewer.draw_pieces=Draw pieces?
Editor.MouseOverStackViewer.draw_zoom=Draw pieces using zoom factor:
Editor.MouseOverStackViewer.display_graphics_obselete=Display unit graphics for single counter?
Editor.MouseOverStackViewer.piece_gap=Width of gap between pieces:
Editor.MouseOverStackViewer.display_text=Display text?
Editor.MouseOverStackViewer.display_text_obsolete=Display text report for single counter?
Editor.MouseOverStackViewer.font_size=Font size:
Editor.MouseOverStackViewer.summary_text=Summary text above pieces:
Editor.MouseOverStackViewer.text_below=Text below each piece:
Editor.MouseOverStackViewer.text_empty=Text for empty location:
Editor.MouseOverStackViewer.include_pieces=Include individual pieces:
Editor.MouseOverStackViewer.listed_layers=Listed layers
Editor.MouseOverStackViewer.piece_filter=Piece selection property filter:
Editor.MouseOverStackViewer.non_stacking=Include non-stacking pieces?
Editor.MouseOverStackViewer.move_selected=Include move-when-selected pieces?
Editor.MouseOverStackViewer.non_moveable=Include non-movable pieces?
Editor.MouseOverStackViewer.unrotated_state=Show pieces in un-rotated state?
Editor.MouseOverStackViewer.top_deck=Include top piece in Deck?
Editor.MouseOverStackViewer.component_type=Mouse-over Stack Viewer

# Deck Global Key Command
Editor.DeckGlobalKeyCommand.command=Global Command:
Editor.DeckGlobalKeyCommand.matching_properties=Matching properties:
Editor.DeckGlobalKeyCommand.affects=Affects:
Editor.DeckGlobalKeyCommand.component_type=Deck Global Key Command

# Draw Pile
Editor.DrawPile.owning_board=Belongs to board:
Editor.DrawPile.xposition=X position:
Editor.DrawPile.yposition=Y position:
Editor.DrawPile.width=Width:
Editor.DrawPile.height=Height:
Editor.DrawPile.multi_draw=Allow Multiple Cards to be Drawn?
Editor.DrawPile.specific_draw=Allow Specific Cards to be Drawn?
Editor.DrawPile.list_cards=When selecting, list cards using
Editor.DrawPile.sort_cards=When selecting, sort cards by
Editor.DrawPile.facedown=Contents are Face-down:
Editor.DrawPile.faceup=Draw new cards face up?
Editor.DrawPile.facedown_report=Face-down Report Format:
Editor.DrawPile.reshuffle=Re-shuffle:
Editor.DrawPile.reshuffle_text=Re-shuffle Menu Text:
Editor.DrawPile.reshuffle_report=Re-shuffle Report Format:
Editor.DrawPile.reshuffle_key=Re-shuffle Hot Key:
Editor.DrawPile.reverse=Reversible?
Editor.DrawPile.reverse_text=Reverse Command Menu Text:
Editor.DrawPile.reverse_report=Reverse Report Format:
Editor.DrawPile.reverse_key=Reverse Hot Key:
Editor.DrawPile.outline=Draw Outline when empty?
Editor.DrawPile.color=Color:
Editor.DrawPile.empty_key=Send Hotkey when empty?
Editor.DrawPile.empty_keyfrom=Hot Key to send when Deck empties:
Editor.DrawPile.send_deck=Include command to send entire deck to another deck?
Editor.DrawPile.send_text=Send Menu text:
Editor.DrawPile.send_report=Send Report Format:
Editor.DrawPile.send_key=Send Hot Key:
Editor.DrawPile.send_deck_name=Name of deck to send to:
Editor.DrawPile.saved=Can be saved-to/loaded-from a file?
Editor.DrawPile.maxdisplay=Maximum Cards to display in Stack:
Editor.DrawPile.perform_express=Perform counting of property expressions?
Editor.DrawPile.count_express=Expressions to count:
Editor.DrawPile.restrict_drag=Restrict adding counters by Drag 'n Drop?
Editor.DrawPile.match_express=Dropped counters must match expression:
Editor.DrawPile.deck=Deck

# Global Map
Editor.GlobalMap.show_hide=Hotkey to show/hide
Editor.GlobalMap.scale_factor=Scale factor
Editor.GlobalMap.hilight=Visible rectangle highlight color
Editor.GlobalMap.component_type=Overview Window

# Hide Piece Button
Editor.HidePieceButton.show_icon=Icon when pieces are showing:
Editor.HidePieceButton.hide_icon=Icon when pieces are hidden:
Editor.HidePieceButton.component_type=Hide Pieces Button

# Highlight Last Moved
Editor.HighlightLastMoved.enabled=Enabled?
Editor.HighlightLastMoved.thickness=Thickness:
Editor.HighlightLastMoved.component_type=Last Move Highlighter

# Image Capture Tool
Editor.ImageSaver.component_type=Image Capture Tool

# Layer Control
Editor.LayerControl.action=Action:
Editor.LayerControl.skip_layer=Skip layers with no counters?
Editor.LayerControl.affect_layer=Affect which layers? (Use layer names or numbers)
Editor.LayerControl.component_type=Game Piece Layer Control

# Layered Piece Collection
Editor.GamePieceLayers.property_layer=Property name for layer:
Editor.GamePieceLayers.order_layer=Layer Order
Editor.GamePieceLayers.component_type=Game Piece Layers

# LOS Thread
Editor.LosThread.persistence=Persistence:
Editor.LosThread.icon_persist=Button Icon when LOS persisting:
Editor.LosThread.visible=Visible to Opponent:
Editor.LosThread.start_grid=Force start of thread to snap to grid?
Editor.LosThread.end_grid=Force end of thread to snap to grid?
Editor.LosThread.draw_range=Draw Range?
Editor.LosThread.pixel_range=Pixels per range unit (0 to use Grid calculation):
Editor.LosThread.round_fractions=Round fractions:
Editor.LosThread.hidden=Hide Pieces while drawing?
Editor.LosThread.opacity=Opacity of hidden pieces (0-100%):
Editor.LosThread.component_type=Line of Sight Thread

# Map Shader
Editor.MapShader.shading_on=Shading Always On?
Editor.MapShader.shading_start=Shading Starts turned on?
Editor.MapShader.shade_boards=All boards in map get Shaded?
Editor.MapShader.board_list=Board List:
Editor.MapShader.type=Type:
Editor.MapShader.shade_top=Draw Shade on top of Counters?
Editor.MapShader.pattern=Shade Pattern:
Editor.MapShader.image=Image:
Editor.MapShader.scale=Scale image with map zoom?
Editor.MapShader.opacity=Opacity(%)
Editor.MapShader.border=Border?
Editor.MapShader.border_color=Border Color:
Editor.MapShader.border_width=Border Width:
Editor.MapShader.border_opacity=Border opacity(%)
Editor.MapShader.component_type=Map Shading

# Piece Recenterer
Editor.PieceRecenter.component_type=Recenter Pieces Button

# Selection Highlighter
Editor.SelectionHighlight.active_property=Active if Properties Match:
Editor.SelectionHighlight.use_image=Use Image
Editor.SelectionHighlight.border_color=Border Color:
Editor.SelectionHighlight.border_thickness=Border Thickness:
Editor.SelectionHighlight.image=Image:
Editor.SelectionHighlight.offset_x=X Offset:
Editor.SelectionHighlight.offset_y=Y Offset:
Editor.SelectionHighlight.component_type=Highlighter

# Additional Selection Highlighters
Editor.AddedSelectionHighlights.component_type=Additional Selection Highlighters

# Mass Key Command
Editor.MassKey.key=Key Command:
Editor.MassKey.match=Matching properties:
Editor.MassKey.counters=Apply to counters on this map only?
Editor.MassKey.deck_content=Apply to contents of Decks:
Editor.MassKey.suppress=Suppress individual reports?
Editor.MassKey.apply=Apply Command:

# At Start Setup Stack
Editor.StartStack.board=Belongs to Board:
Editor.StartStack.grid=Use Grid Location:
Editor.StartStack.location=Location:
Editor.StartStack.position_x=X position:
Editor.StartStack.position_y=Y position:
Editor.StartStack.component_type=At-Start Stack

# Stack Metrics
Editor.Stacking.disable=Disable stacking?
Editor.Stacking.h_expand=Horizontal separation when expanded:
Editor.Stacking.v_expand=Vertical separation when expanded:
Editor.Stacking.hnon_expand=Horizontal separation when not expanded:
Editor.Stacking.vnon_expand=Vertical separation when not expanded:
Editor.Stacking.color_nonexpand=Color of pieces when not expanded:
Editor.Stacking.component_type=Stacking options

# Text Saver
Editor.TextCapture.component_type=Text Capture Tool

# Zoomer
Editor.Zoom.preset=Preset zoom levels:
Editor.Zoom.in_tooltip=Zoom in tooltip text:
Editor.Zoom.in_button=Zoom in button text:
Editor.Zoom.in_icon=Zoom in Icon:
Editor.Zoom.in_key=Zoom in hotkey:
Editor.Zoom.select_tooltip=Zoom select tooltip text
Editor.Zoom.select_button=Zoom select button text
Editor.Zoom.select_icon=Zoom select Icon
Editor.Zoom.select_key=Zoom select hotkey
Editor.Zoom.out_tooltip=Zoom out tooltip text:
Editor.Zoom.out_button=Zoom out button text:
Editor.Zoom.out_icon=Zoom out Icon:
Editor.Zoom.out_key=Zoom out hotkey:
Editor.Zoom.component_type=Zoom capability
Editor.zoom.initial_zoom="An '*' indicates the initial zoom level."
Editor.zoom.set_initial=Set Initial

# Board
Editor.Board.image=Board image:
Editor.Board.reverse=Reversible:
Editor.Board.width=Board width:
Editor.Board.height=Board height:
Editor.Board.component_type=Board

# Grids
Editor.Grid.y_offset=X offset:
Editor.Grid.x_offset=Y offset:
Editor.Grid.edges=Edges are legal locations?
Editor.Grid.show_grid=Show Grid?
Editor.Grid.center_dots=Draw Center Dots?
Editor.Grid.edit_grid=Edit Grid
Editor.Grid.snap=Snap to defined point?

# Grid Editor
Editor.GridEditor.arrow_keys=Arrow Keys - Move Grid
Editor.GridEditor.cancel_set=Cancel Set
Editor.GridEditor.click_on_3=Click on 3 adjacent points around the edge of any map grid cell
Editor.GridEditor.control_arrow_keys=Control-Arrow Keys - Resize Grid
Editor.GridEditor.grid_shape_error=Grid Shape Error
Editor.GridEditor.numbering=Numbering
Editor.GridEditor.set_grid_shape=Set Grid Shape
Editor.GridEditor.shift_key=Shift Key - Increase speed of other keys
Editor.GridEditor.does_not_look=Does not look like a %1$s!

# Hex Grid
Editor.HexGrid.sideways=Sideways (hexrows go horizontal)?
Editor.HexGrid.hex_height=Hex Height:
Editor.HexGrid.hex_width=Hex Width:
Editor.HexGrid.vertices=Vertices are legal locations?
Editor.HexGrid.component_type=Hex Grid

# Region
Editor.Region.new_region=New Region
Editor.Region.x_coord=X Co-ord:
Editor.Region.y_coord=Y Co-ord:
Editor.Region.component_type=Region

# Irregular Grid
Editor.IrregularGrid.draw=Draw region names?
Editor.IrregularGrid.fonts=Font Size:
Editor.IrregularGrid.component_type=Irregular Grid
Editor.IrregularGrid.define_regions=Define Regions
Editor.IrregularGrid.regions_for=Regions for %1$s
Editor.IrregularGrid.drag_and_drop=Drag and Drop selected regions to move, or use ctrl-arrows/ctrl-shift-arrows for precise movement.
Editor.IrregularGrid.changes_made=Changes made. Are you sure you want to Cancel those changes?
Editor.IrregularGrid.add_region=Add Region
Editor.IrregularGrid.delete_region=Delete Region

# Rectangle Grid
Editor.RectangleGrid.width=Cell Width:
Editor.RectangleGrid.height=Cell Height:
Editor.RectangleGrid.range_method=Range Calculation Method:
Editor.RectangleGrid.corners=Corners are legal locations?
Editor.RectangleGrid.component_type=Rectangular Grid

# Multi-Zone Grid
Editor.MultiZoneGrid.component_type=Multi-zoned Grid

# Trigger Action
Editor.TriggerAction.component_type=Trigger Action  
Editor.TriggerAction.keystroke_after=Perform this Keystroke once after looping completes:  
Editor.TriggerAction.keystroke_before=Perform this Keystroke once before looping starts:  
Editor.TriggerAction.perform_keystrokes=Perform these Keystrokes:  
Editor.TriggerAction.trigger_when_properties=Trigger when properties match:  
Editor.TriggerAction.watch_for=Watch for these Keystrokes:  
Editor.TriggerAction.repeat_this=Repeat this set of KeyStrokes (Loop)?
Editor.TriggerAction.looping_ends=Loop until condition is true:
Editor.TriggerAction.looping_continues=Loop while condition is true:
